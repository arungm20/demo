/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fs.investments.rest;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fs.investments.model.InvestmentRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-03-30T16:53:04.569+05:30")

@Api(value = "investment", description = "the investment API")
@RequestMapping("/api")
public interface InvestmentApi {

    @ApiOperation(value = "API to Create Investment", nickname = "createInvestment", notes = "API receives Investment and saves into DB", tags={ "Investment Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/investment/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createInvestment(@ApiParam(value = "Represents  investment entity" ,required=true )  @Valid @RequestBody InvestmentRequest investment);


    @ApiOperation(value = "API to retrieve investment", nickname = "deleteInvestment", notes = "API to delete investment in DB", tags={ "Investment Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/investment/delete",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteInvestment(@NotNull @ApiParam(value = "Represents  investment id to be retrieved", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "API to retrieve investment", nickname = "retrieveInvestment", notes = "API retrieves Investment corresponding to the id", tags={ "Investment Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/investment/retrieve",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Void> retrieveInvestment(@NotNull @ApiParam(value = "Represents  investment id to be retrieved", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "API to retrieve investment", nickname = "retrieveInvestment", notes = "API retrieves Investment corresponding to the id", tags={ "Investment Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/investment/list",
        produces = { "text/html" }, 
        method = RequestMethod.GET)
    String retrieveAllInvestment(Model model);


    @ApiOperation(value = "API to retrieve investment", nickname = "updateInvestment", notes = "API receives validated Investment updates in DB", tags={ "Investment Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/investment/update",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateInvestment(@NotNull @ApiParam(value = "Represents  investment id to be retrieved", required = true) @Valid @RequestParam(value = "id", required = true) String id,@ApiParam(value = "Represents  investment entity" ,required=true )  @Valid @RequestBody InvestmentRequest investment);

}
